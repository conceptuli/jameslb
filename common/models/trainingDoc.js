// Generated by CoffeeScript 1.8.0
(function() {
  var Trainer, db, loki, natural, path;

  natural = require('natural');

  loki = require('lokijs');

  path = require('path');

  db = new loki('brain.json');

  console.log(db);

  db.saveToDisk();

  db.close();

  Trainer = (function() {
    function Trainer(classifier) {
      var foo;
      this.classifier = classifier;
      foo = db.addCollection("" + this.classifier);
      foo.insert({
        name: 'test',
        phrase: 'this is a test',
        age: 12
      });
      db.saveToDisk();
      foo.data + 'ok';
    }

    Trainer.prototype.addPhrase = function(classifier, phrase, type) {
      var bar;
      this.classifier = classifier;
      bar = db.addCollection("" + this.classifier);
      this.classifier.insert({
        phrase: phrase,
        type: type
      });
      this.classifier.insert({
        type: 'test'
      });
      db.saveToDisk();
      return console.log('ok');
    };

    return Trainer;

  })();

  module.exports = function(trainingDoc) {
    trainingDoc.createCollection = function(classifier, data) {
      var error;
      try {
        console.log(classifier);
        new Trainer(classifier);
        return data(null, 'ok');
      } catch (_error) {
        error = _error;
        return console.log(error);
      }
    };
    trainingDoc.remoteMethod("createCollection", {
      http: {
        verb: 'get'
      },
      accepts: {
        arg: 'classifier',
        type: 'string'
      },
      returns: {
        arg: 'data',
        type: 'object'
      }
    });
    trainingDoc.addPhrase = function(classifier, phrase, type, data) {
      var error;
      try {
        return classifier.addPhrase(phrase, type);
      } catch (_error) {
        error = _error;
        return console.log(error);
      } finally {
        data(null, 'ok');
      }
    };
    return trainingDoc.remoteMethod("addPhrase", {
      http: {
        verb: 'post'
      },
      accepts: [
        {
          arg: 'classifier',
          type: 'string'
        }, {
          arg: 'phrase',
          type: 'string'
        }, {
          arg: 'type',
          type: 'string'
        }
      ],
      returns: {
        arg: 'data',
        type: 'object'
      }
    });
  };

}).call(this);

//# sourceMappingURL=trainingDoc.js.map
